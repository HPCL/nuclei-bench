/*
 * How to compile (assume cuda is installed at /usr/local/cuda/)
 *   nvcc -c -I/usr/local/cuda/include syevd_example.cpp 
 *   g++ -o a.out syevd_example.o -L/usr/local/cuda/lib64 -lcudart -lcusolver
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <time.h>
#include <chrono>

#include <exception>
#include <sstream>
#include <iomanip>

#include <cuda_runtime.h>
#include <cusolverDn.h>

#include <armadillo>

#include "magma_v2.h"
#include "cublas_v2.h"

struct CudaException : public std::exception
{
  private:
    const char *m_name;
    int m_code;
    const char *m_file;
    int m_line;
    const char *m_desc;

  public:
    CudaException(const char *name_, int code_, const char* file_, int line_, const char* desc)
    : m_name(name_)
    , m_code(code_)
    , m_file(file_)
    , m_line(line_)
    , m_desc(desc)
    {
    }

    const char * what () const throw ()
    {
      std::stringstream ss;
      ss << m_name << "_ERROR[" << m_file << ":" << m_line << "] code=" << m_code << " " << m_desc << std::endl;
      return ss.str().c_str();
    }
};


#define check_cuda_status(ans) { _check_status("CUDA", (ans), cudaSuccess, __FILE__, __LINE__, ""); }
#define check_cusolver_status(ans) { _check_status("CUSOLVER", (ans), CUSOLVER_STATUS_SUCCESS, __FILE__, __LINE__, ""); }
#define check_magma_status(ans) { _check_status("MAGMA", (ans), MAGMA_SUCCESS, __FILE__, __LINE__, magma_strerror(ans)); }


void _check_status(const char name[], int code, int ok, const char *file, int line, const char* desc)
{
  if (code != ok)
  {
    throw CudaException(name, code, file, line, desc);
  }
}


struct time_result
{
  double trace;
  double load_time;
  double transfer_time;
  double compute_time;
};
typedef struct time_result time_result_t;



// Diagonalize on CPU with lapack
time_result_t test_lapack(arma::cx_mat &A)
{
  auto start_load = std::chrono::system_clock::now();
  arma::vec eigval(A.n_cols, arma::fill::zeros);
  arma::cx_mat eigvec(A.n_cols, A.n_cols, arma::fill::zeros);
  auto end_load = std::chrono::system_clock::now();;

  auto start_cpu=std::chrono::system_clock::now();
  arma::eig_sym(eigval, eigvec, A);
  auto end_cpu=std::chrono::system_clock::now();

  double trA = arma::accu(eigval);
 
  std::chrono::duration<double> load_time = end_load-start_load;
  std::chrono::duration<double> comp_time = end_cpu-start_cpu;
  return {
    trA,
    load_time.count(),
    0.,
    comp_time.count()
  };
}

// Diagonalize on GPU with cuSolver
time_result_t test_cusolver(arma::cx_mat const&A)
{
  cusolverDnHandle_t cusolverH = NULL;
  cusolverDnParams_t params = NULL;
  cusolverStatus_t cusolver_status = CUSOLVER_STATUS_SUCCESS;
  cudaError_t cudaStat1 = cudaSuccess;
  cudaError_t cudaStat2 = cudaSuccess;
  cudaError_t cudaStat3 = cudaSuccess;

  int m = A.n_cols;
  int lda = 32 * ((m-1) / 32) + 32;

  ////// BEGIN LOAD ////////////////////////////////////////////////////////////
  auto start_load = std::chrono::system_clock::now();
  cuDoubleComplex *_A = new cuDoubleComplex[lda*m];
  for (int j = 0; j < m; j++)
  for (int i = 0; i < m; i++)
  {
    arma::cx_double val = A(i, j);
    _A[m*j + i] = make_cuDoubleComplex(val.real(), val.imag());
  }

  cuDoubleComplex *V = new cuDoubleComplex[lda*m]; // eigenvectors
  double *W = new double[m]; // eigenvalues

  cuDoubleComplex *d_A = NULL;
  double *d_W = NULL;
  int *devInfo = NULL;
  cuDoubleComplex *d_work = NULL;
  size_t d_lwork = 0;
  size_t h_lwork = 0;

  int info_gpu = 0;

  // create cusolver/cublas handle and params
  cusolver_status = cusolverDnCreate(&cusolverH);
  check_cusolver_status(cusolver_status);

  cusolver_status = cusolverDnCreateParams(&params);
  check_cusolver_status(cusolver_status);

  // allocate memory on host and device
  cudaStat1 = cudaMalloc ((void**)&d_A, sizeof(cuDoubleComplex) * lda * m);
  check_cuda_status(cudaStat1);

  cudaStat2 = cudaMalloc ((void**)&d_W, sizeof(double) * m);
  check_cuda_status(cudaStat2);

  cudaStat3 = cudaMalloc ((void**)&devInfo, sizeof(int));
  check_cuda_status(cudaStat3);

  // configure solver
  cusolverEigMode_t jobz = CUSOLVER_EIG_MODE_VECTOR; // compute eigenvalues and eigenvectors.
  cublasFillMode_t uplo = CUBLAS_FILL_MODE_LOWER;

  // query working space of syevd
  cusolver_status = cusolverDnXsyevd_bufferSize(
      cusolverH,
      params,
      jobz,
      uplo,
      m,
      CUDA_C_64F,
      d_A,
      lda,
      CUDA_R_64F,
      d_W,
      CUDA_C_64F,
      &d_lwork,
      &h_lwork);
  check_cusolver_status(cusolver_status);

  cudaStat1 = cudaMalloc((void**)&d_work, sizeof(cuDoubleComplex)*d_lwork);
  check_cuda_status(cudaStat1);
  cuDoubleComplex *h_work = new cuDoubleComplex[h_lwork];
  auto end_load = std::chrono::system_clock::now();
  ////// END LOAD //////////////////////////////////////////////////////////////
  
  ////// BEGIN TRANSFER ////////////////////////////////////////////////////////
  auto start_transfer_1 = std::chrono::system_clock::now();
  cudaStat1 = cudaMemcpy(d_A, _A, sizeof(cuDoubleComplex) * lda * m, cudaMemcpyHostToDevice);
  auto end_transfer_1 = std::chrono::system_clock::now();
  check_cuda_status(cudaStat1);
  ////// END TRANSFER //////////////////////////////////////////////////////////

  ////// BEGIN COMPUTE /////////////////////////////////////////////////////////
  // compute eigendecomposition
  auto start_gpu=std::chrono::system_clock::now();
  cusolver_status = cusolverDnXsyevd(
      cusolverH,
      params,
      jobz,
      uplo,
      m,
      CUDA_C_64F,
      d_A,
      lda,
      CUDA_R_64F,
      d_W,
      CUDA_C_64F,
      d_work,
      d_lwork,
      h_work,
      h_lwork,
      devInfo);
  check_cusolver_status(cusolver_status);

  cudaStat1 = cudaDeviceSynchronize();
  check_cuda_status(cudaStat1);
  auto end_gpu=std::chrono::system_clock::now();
  ////// END COMPUTE ///////////////////////////////////////////////////////////


  ////// BEGIN TRANSFER ////////////////////////////////////////////////////////
  auto start_transfer_2 = std::chrono::system_clock::now();
  // transfer data back to host
  cudaStat1 = cudaMemcpy(W, d_W, sizeof(double)*m, cudaMemcpyDeviceToHost);
  cudaStat2 = cudaMemcpy(V, d_A, sizeof(cuDoubleComplex)*lda*m, cudaMemcpyDeviceToHost);
  cudaStat3 = cudaMemcpy(&info_gpu, devInfo, sizeof(int), cudaMemcpyDeviceToHost);
  auto end_transfer_2 = std::chrono::system_clock::now();
  ////// END TRANSFER //////////////////////////////////////////////////////////
  check_cuda_status(cudaStat1);
  check_cuda_status(cudaStat2);
  check_cuda_status(cudaStat3);

  assert(0 == info_gpu);

  double gpu_trA = 0.;
  for(int i = 0 ; i < m ; i++)
  {
    gpu_trA += W[i];
  }

  // free resources
  if (d_A    ) cudaFree(d_A);
  if (d_W    ) cudaFree(d_W);
  if (devInfo) cudaFree(devInfo);
  if (d_work ) cudaFree(d_work);

  delete [] _A;
  delete [] V;
  delete [] W;
  delete [] h_work;

  if (cusolverH) cusolverDnDestroy(cusolverH);
  if (params) cusolverDnDestroyParams(params);

  cudaDeviceReset();

  std::chrono::duration<double> load_time = end_load-start_load;
  std::chrono::duration<double> tran_time = end_transfer_1-start_transfer_1+end_transfer_2-start_transfer_2;
  std::chrono::duration<double> comp_time = end_gpu-start_gpu;
  return {
    gpu_trA,
    load_time.count(),
    tran_time.count(),
    comp_time.count()
  };

}

// Diagonalize on GPU with Magma, using CPU interface
time_result_t test_magma_cpu(arma::cx_mat const&A)
{
  int info = 1234;
  int m = A.n_cols;
  int lda = m;

  ////// BEGIN LOAD ////////////////////////////////////////////////////////////
  auto start_load = std::chrono::system_clock::now();
  magmaDoubleComplex *_A = NULL;
  magma_zmalloc_cpu(&_A, lda*m);

  for (magma_int_t j = 0; j < m; j++)
  for (magma_int_t i = 0; i < m; i++)
  {
    arma::cx_double val = A(i, j);
    _A[i + j*lda] = MAGMA_Z_MAKE(val.real(), val.imag());
  }

  // Allocate space for eigenvectors
  magmaDoubleComplex *V = NULL;
  info = magma_zmalloc_cpu(&V, lda*m);
  check_magma_status(info);
  // Allocate space for eigenvalues
  double *W = NULL;
  info = magma_dmalloc_cpu(&W, m);
  check_magma_status(info);
  // Query optimal workspace sizes
  int lzwork = 0, lrwork = 0, liwork = 0;
  {
    magmaDoubleComplex aux_zwork[1];
    double aux_rwork[1];
    int aux_iwork[1];

    magma_zheevd(
        MagmaVec,
        MagmaLower,
        m,
        _A,
        lda,
        W,
        aux_zwork, -1,
        aux_rwork, -1,
        aux_iwork, -1,
        &info
    );
    check_magma_status(info);

    lzwork = (magma_int_t) MAGMA_Z_REAL(aux_zwork[0]);
    lrwork = (magma_int_t) aux_rwork[0];
    liwork = (magma_int_t) aux_iwork[0];
  }
  // Allocate workspaces
  magmaDoubleComplex *zwork = NULL;
  info = magma_zmalloc_cpu(&zwork, lzwork);
  check_magma_status(info);
  double *rwork = NULL;
  info = magma_dmalloc_cpu(&rwork, lrwork);
  check_magma_status(info);
  int *iwork = NULL;
  info = magma_imalloc_cpu(&iwork, liwork);
  check_magma_status(info);
  auto end_load = std::chrono::system_clock::now();
  ////// END LOAD //////////////////////////////////////////////////////////////

  ////// BEGIN TRANSFER ////////////////////////////////////////////////////////
  // (no transfer in cpu mode)
  ////// END TRANSFER //////////////////////////////////////////////////////////

  ////// BEGIN COMPUTE /////////////////////////////////////////////////////////
  auto start_compute = std::chrono::system_clock::now();
  magma_zheevd(
      MagmaVec,
      MagmaLower,
      m,
      _A,
      lda,
      W,
      zwork, lzwork,
      rwork, lrwork,
      iwork, liwork,
      &info
  );
  check_magma_status(info);
  auto end_compute = std::chrono::system_clock::now();
  ////// END COMPUTE ///////////////////////////////////////////////////////////

  double trA = 0.;
  for(int i = 0 ; i < m ; i++)
  {
    trA += W[i];
  }

  // free resources
  magma_free_cpu(_A);
  magma_free_cpu(V);
  magma_free_cpu(W);
  magma_free_cpu(zwork);
  magma_free_cpu(rwork);
  magma_free_cpu(iwork);

  std::chrono::duration<double> load_time = end_load-start_load;
  //std::chrono::duration<double> tran_time = end_transfer_1-start_transfer_1+end_transfer_2-start_transfer_2;
  std::chrono::duration<double> comp_time = end_compute-start_compute;

  return {
    trA, // result
    load_time.count(),
    0.,
    comp_time.count()
  };
}

// Diagonalize on GPU with Magma, using GPU interface
time_result_t test_magma_gpu(arma::cx_mat const&A)
{
  int info = 1234;
  int m = A.n_cols;
  int lda = magma_roundup( m, 32 );

  magma_queue_t queue = NULL;
  magma_int_t dev = 0;
  magma_queue_create(dev, &queue);


  ////// BEGIN LOAD ////////////////////////////////////////////////////////////
  auto start_load = std::chrono::system_clock::now();
  magmaDoubleComplex *h_A = NULL;
  magma_zmalloc_cpu(&h_A, lda*m);
  magmaDoubleComplex *d_A = NULL;
  magma_zmalloc(&d_A, lda*m);

  for (magma_int_t j = 0; j < m; j++)
  for (magma_int_t i = 0; i < m; i++)
  {
    const arma::cx_double val = A(i, j);
    h_A[i + j*lda] = MAGMA_Z_MAKE(val.real(), val.imag());
  }

  // Allocate space for eigenvectors
  magmaDoubleComplex *V = NULL;
  info = magma_zmalloc_cpu(&V, lda*m);
  check_magma_status(info);
  // Allocate space for eigenvalues
  double *W = NULL;
  info = magma_dmalloc_cpu(&W, m);
  check_magma_status(info);
  // Query optimal workspace sizes
  int lzwork = 0, lrwork = 0, liwork = 0;
  {
    magmaDoubleComplex aux_zwork[1];
    double aux_rwork[1];
    int aux_iwork[1];

    magma_zheevd_gpu(
        MagmaVec,
        MagmaLower,
        m,
        d_A,
        lda,
        W,
        h_A, m, // FIXME Bug in doc?
        aux_zwork, -1,
        aux_rwork, -1,
        aux_iwork, -1,
        &info
    );
    check_magma_status(info);

    lzwork = (magma_int_t) MAGMA_Z_REAL(aux_zwork[0]);
    lrwork = (magma_int_t) aux_rwork[0];
    liwork = (magma_int_t) aux_iwork[0];
  }
  // Allocate workspaces
  magmaDoubleComplex *zwork = NULL;
  info = magma_zmalloc_cpu(&zwork, lzwork);
  check_magma_status(info);
  double *rwork = NULL;
  info = magma_dmalloc_cpu(&rwork, lrwork);
  check_magma_status(info);
  int *iwork = NULL;
  info = magma_imalloc_cpu(&iwork, liwork);
  check_magma_status(info);
  auto end_load = std::chrono::system_clock::now();
  ////// END LOAD //////////////////////////////////////////////////////////////

  ////// BEGIN TRANSFER ////////////////////////////////////////////////////////
  auto start_transfer_1 = std::chrono::system_clock::now();
  magma_zsetmatrix(m, m, h_A, m, d_A, m, queue);
  auto end_transfer_1 = std::chrono::system_clock::now();
  ////// END TRANSFER //////////////////////////////////////////////////////////

  ////// BEGIN COMPUTE /////////////////////////////////////////////////////////
  auto start_compute = std::chrono::system_clock::now();
  magma_zheevd_gpu(
      MagmaVec,
      MagmaLower,
      m,
      h_A,
      lda,
      W,
      h_A, m, // FIXME Bug in doc?
      zwork, lzwork,
      rwork, lrwork,
      iwork, liwork,
      &info
  );
  check_magma_status(info);
  auto end_compute = std::chrono::system_clock::now();
  ////// END COMPUTE ///////////////////////////////////////////////////////////

  ////// BEGIN TRANSFER ////////////////////////////////////////////////////////
  auto start_transfer_2 = std::chrono::system_clock::now();
  magma_zgetmatrix(m, m, d_A, m, h_A, m, queue);
  auto end_transfer_2 = std::chrono::system_clock::now();
  ////// END TRANSFER //////////////////////////////////////////////////////////

  double trA = 0.;
  for(int i = 0 ; i < m ; i++)
  {
    trA += W[i];
  }

  // free resources
  magma_free_cpu(h_A);
  magma_free(d_A);
  magma_free_cpu(V);
  magma_free_cpu(W);
  magma_free_cpu(zwork);
  magma_free_cpu(rwork);
  magma_free_cpu(iwork);

  std::chrono::duration<double> load_time = end_load-start_load;
  std::chrono::duration<double> tran_time = end_transfer_1-start_transfer_1+end_transfer_2-start_transfer_2;
  std::chrono::duration<double> comp_time = end_compute-start_compute;

  return {
    trA, // result
    load_time.count(), // load time
    tran_time.count(), // transfer time
    comp_time.count() // compute time
  };
}



int main(int argc, char*argv[])
{
    if (argc < 2) exit(1);
    unsigned int m = atoi(argv[1]);
    bool print_header = (argc > 2) ? atoi(argv[2]) : false;

    int status = magma_init();
    if (status != MAGMA_SUCCESS)
    {
      std::cout << "MAGMA ERROR 1" << status << std::endl;
    }

    //const unsigned int m = 32;
    //double __A[2*m*m]  = { 1.369148409562066e+00, 0.000000000000000e+00, 1.541885913168322e-01, 4.690993272269954e-02, -1.674383361905423e-01, -1.153032081544440e-03, 2.159735454845131e-01, 1.734091536850396e-01, 4.815338398823864e-02, -1.068232060598123e-01, 1.265961494372236e-01, -1.674365026258416e-02, 7.476248864050872e-02, -8.030029563261638e-02, 1.946376871407125e-01, -1.099443531749844e-01, -7.561634833866372e-02, -8.952184152838129e-02, -3.011740399288312e-02, -3.142099965011108e-03, -1.684813361976671e-02, 1.305583698999927e-01, 8.727100304012909e-02, -3.067623591156135e-02, -5.959084614968344e-03, 9.492242218034228e-02, -1.404696261840815e-02, -2.090853817111141e-01, 8.750796052607646e-02, -1.444255121993728e-02, -2.984709016665775e-02, -3.513030301900164e-02, 1.748481844419688e-01, 1.020134123794468e-01, 3.214188959548324e-02, -1.126094000275749e-01, 1.358518726206936e-01, 3.786783624340463e-02, -6.539200901412615e-02, 5.206556028298353e-02, 2.483575843944261e-01, 2.465575134509616e-02, -7.753496639525509e-02, 1.763540457051778e-01, -5.170877626503252e-02, 3.946388253737849e-02, -1.208095519559371e-01, -1.897276226071015e-01, 1.619589782283658e-01, -8.518064393053302e-03, 7.774739664800642e-02, -8.340129509651066e-02, -4.495161393519861e-02, -1.120030392368822e-01, 1.885918103724986e-01, 1.005877434933441e-02, 8.766452015171769e-02, 5.181740095084698e-02, 1.064341108242523e-01, 9.127831414677159e-02, -5.961717124084859e-04, 5.429817336469370e-02, 9.649770377559537e-02, 4.965816987723403e-02, 1.541885913168322e-01, -4.690993272269953e-02, 1.692171407915553e+00, 1.604619215278547e-17, -3.948545530517347e-02, -1.023114546757678e-01, 6.414430638369080e-02, 6.719529701238158e-02, 1.826540022049508e-02, -1.919763708236396e-01, -9.543829455513116e-02, 7.183569852467803e-02, -1.124767848284677e-01, 5.052484924687259e-02, 2.023447852783757e-01, 2.037976332359717e-03, 1.139535106841953e-01, -7.692084452695089e-02, 2.362158633795202e-01, -1.151656340285697e-01, 2.041905378638285e-01, -2.136675956716081e-01, 1.302827704945619e-01, 9.824341627209285e-02, 4.761319184238923e-02, -1.317666699352853e-01, 1.604409314294678e-01, 9.465628385308786e-02, 3.029428766594626e-01, 1.441094399041022e-01, -6.879814400453842e-02, -7.707249314693340e-02, 2.432998340582476e-01, -1.465051479728691e-01, 7.445985354568595e-02, 6.591910277925590e-02, 5.454292404833522e-02, -1.173052609850810e-01, -1.198557250993577e-01, 6.738637121284551e-03, -4.631757395874181e-02, 6.117810691795818e-02, -2.005869215687735e-02, 2.034269643151262e-01, -1.224357101134994e-01, 9.047427579397432e-02, -6.725945814236550e-03, -2.853423876914861e-02, -2.763082765378888e-02, -5.109350819268679e-02, -1.251870624352214e-01, 3.733829657673726e-04, -4.629948251818314e-02, -2.580457328470410e-02, 3.594416044446869e-02, -1.237741618836196e-01, -1.924879221126594e-02, -3.751260206769975e-03, 1.728105283146434e-01, 5.019282833828745e-02, 1.848060454100060e-01, 1.248673320527933e-01, -3.346790820427017e-02, 5.004973848760258e-02, -1.674383361905423e-01, 1.153032081544443e-03, -3.948545530517342e-02, 1.023114546757677e-01, 1.639269231401596e+00, 1.368805242762949e-18, 2.469651804671368e-01, 6.097318592939221e-02, 2.012442764560917e-01, 8.360609005241628e-03, -1.170109782882310e-02, -4.163136589088913e-02, 2.193135677278366e-01, 2.943567027677274e-02, 4.736191246133663e-02, -1.735383124773301e-01, -4.806849860918465e-02, -3.294601930537375e-02, 1.149597101628999e-03, -2.920373831944855e-02, -5.990329859579133e-03, -1.240043994982372e-02, -9.551679047233821e-03, 1.972282904170847e-01, -8.464347979036267e-02, 1.329133510198696e-01, 4.521100489372090e-02, -1.945015364797077e-02, -6.960454482298015e-02, 6.555092627149769e-02, 2.536097814995392e-03, 1.374096888983977e-01, 2.539001251910695e-01, -2.590538346144898e-01, 1.677590666377521e-01, 1.640660655318125e-01, 3.373288940584830e-02, -8.080079205686512e-02, 1.340223386923674e-01, 1.604938123809097e-01, 3.600023227545573e-03, -4.089039125817021e-02, -1.155497016630471e-01, -1.188856946605500e-01, -1.066283729000563e-01, -1.497742082889041e-02, 1.267931154565452e-01, -1.118062915428779e-01, -1.501519923988478e-01, -1.426695289455670e-03, 2.302026304105762e-01, 7.322257030385854e-02, 7.274496517910596e-02, 1.350935429763330e-01, 2.886853122305882e-03, -9.116406111935441e-02, -1.751239240944551e-02, -1.509438525919326e-01, 1.167353821611380e-01, 2.288996683919747e-02, -8.032856988192505e-03, -2.842493702695303e-02, 3.251745401726239e-01, 6.325559692321779e-02, 2.159735454845131e-01, -1.734091536850396e-01, 6.414430638369083e-02, -6.719529701238154e-02, 2.469651804671367e-01, -6.097318592939216e-02, 1.763710034487378e+00, 2.710505431213761e-19, -6.721920056485418e-02, 1.122065228734324e-01, -9.955214670438568e-02, -1.258801487833083e-01, 3.653031028589265e-02, 1.320723127397919e-01, 1.167365218416780e-01, 2.519285959989221e-03, 9.141170233762519e-02, -1.504346700671564e-02, -1.688858186885074e-01, 2.164614876482049e-01, 2.541717563101773e-01, -1.062971224646770e-01, 1.327424980761722e-01, 1.697343647544399e-01, -1.321778947048603e-01, -4.019219233780655e-02, 1.034077092233439e-02, 1.399961468159586e-01, -5.884720313532160e-02, -7.601871437469442e-02, 4.141340558350956e-02, -2.909182490849807e-02, -1.409333874348664e-01, 4.177025723883897e-02, -4.141538542762294e-02, 1.859514892602060e-01, -7.795899457234318e-02, 2.027396288004550e-01, 1.966258276962925e-01, -5.915788357889894e-02, -4.936640147480686e-03, 7.397007979596038e-02, 2.766741873099213e-01, -2.167943968582436e-02, -7.093074995122076e-02, 9.251081245751022e-02, -1.133858409372195e-02, -1.877735927630879e-01, 3.141924619125416e-02, -1.668167152121632e-01, 2.036988770927931e-02, 1.755005060897038e-02, 7.611432174945865e-02, -2.836382804560090e-02, 7.773006873497587e-02, -3.903851723707317e-02, 2.061974637160968e-01, -2.392159006405740e-02, -3.463937517543909e-02, 1.022448645303654e-01, 6.185045792202053e-02, 2.178291900328828e-03, 9.112940704500090e-02, -7.204176806302476e-03, 4.815338398823867e-02, 1.068232060598124e-01, 1.826540022049507e-02, 1.919763708236396e-01, 2.012442764560917e-01, -8.360609005241593e-03, -6.721920056485418e-02, -1.122065228734324e-01, 1.340276745934420e+00, -8.023096076392733e-18, 2.820419925496714e-01, 1.150788456359634e-02, 1.435502233561443e-01, -4.133597515720289e-03, -4.222308732580914e-02, -8.333796647399671e-03, -1.018559935174993e-01, 1.844800261856042e-02, 2.924660814671473e-01, -1.351564973094279e-01, 2.228597806628825e-02, -1.925765313232506e-01, 2.093595779077108e-01, -1.246555599484125e-01, -4.282938888467362e-02, -1.068442783765109e-01, -7.051796297022715e-02, 1.977249614537300e-02, -7.775307135024274e-02, 1.612216841274983e-01, 1.093673980257539e-01, 7.870307621522092e-02, 7.792544718011070e-02, 2.519233858484766e-02, 2.010646431483556e-01, 1.459917674592321e-01, -1.763896579243614e-02, -9.196667190154870e-02, -1.516179781149952e-01, 2.483829424073944e-04, 9.641849930860950e-02, 1.868273220230923e-01, 7.309304137305075e-02, -1.088642503627557e-01, 1.067054137971544e-01, -6.584990177629055e-02, 1.607348648597032e-01, 7.495776572939729e-02, -1.175078059534970e-03, 8.926264742645003e-02, -7.217727542235597e-03, -6.979923639055270e-02, -6.297456768053952e-02, 9.376323669457440e-03, -1.628208654782490e-01, 4.265507112452202e-02, 1.149188831746611e-01, -2.292163525504218e-01, 7.631680711995191e-02, 6.573174657830162e-02, -8.300391894406554e-02, -2.024697593037038e-01, 2.085006714654560e-01, 9.405819477320439e-02, 1.265961494372236e-01, 1.674365026258413e-02, -9.543829455513117e-02, -7.183569852467800e-02, -1.170109782882310e-02, 4.163136589088910e-02, -9.955214670438566e-02, 1.258801487833083e-01, 2.820419925496714e-01, -1.150788456359637e-02, 1.781766442805043e+00, 9.649399335120989e-18, -8.824389659317246e-02, -1.518131337499135e-01, -2.767425015291407e-02, 1.850969516767911e-01, 2.443362160294578e-02, 5.487083382375024e-02, 1.326516424810549e-02, 2.267977043868928e-01, 5.340978007818233e-02, -1.617495244576252e-01, 2.221357856431102e-01, 1.832437126764057e-01, 7.678558769078681e-02, -8.251700079945545e-02, -6.736397741388667e-02, 1.339078237649482e-02, 7.033208696563906e-02, -2.339638381279231e-01, 1.294897192841774e-01, 1.129943070243787e-01, 1.530340995518051e-01, -4.300952122936830e-02, 1.649908136607462e-01, -1.838943783179705e-01, 1.734050513150049e-01, 7.759217219502182e-02, -6.646459510731680e-02, -1.229216047890506e-01, 1.415719223745476e-01, 8.409547812750670e-02, -1.481715466544231e-02, -1.933945367388265e-01, 1.797443905627564e-01, 1.615688489388402e-01, 2.231973920530440e-02, 1.282741430376782e-01, 1.146669577614026e-01, -2.433148670847193e-01, -7.796837632945336e-02, 1.553025818514270e-01, -1.579210049839343e-01, -4.154044035905019e-02, 3.757239311668988e-02, 6.161834601345348e-02, 1.899525279326884e-01, 8.816837596517973e-02, 5.945481899827115e-02, -3.732105336603581e-02, -1.240382981068967e-01, 3.590298076980540e-02, -4.828557685254525e-02, -3.307210040613728e-02, 7.476248864050869e-02, 8.030029563261638e-02, -1.124767848284677e-01, -5.052484924687259e-02, 2.193135677278366e-01, -2.943567027677273e-02, 3.653031028589265e-02, -1.320723127397920e-01, 1.435502233561443e-01, 4.133597515720330e-03, -8.824389659317249e-02, 1.518131337499135e-01, 1.399954788726163e+00, -9.217836048494923e-19, -2.786235944375574e-02, -1.951986493253495e-01, -1.489665979797999e-01, 5.782297940587015e-02, 1.452616048881268e-01, -2.273262308936640e-01, 1.265735831830034e-01, 1.931060169882828e-02, 2.480886227978690e-02, 1.021829095502989e-01, -6.433257967852270e-02, 3.220811135784758e-02, 4.967869721346500e-02, 6.602947970646610e-02, 1.932917202565416e-01, -2.780984405644042e-02, -1.104455122528069e-01, 1.212183083732005e-01, -1.010785318810046e-01, 8.976445986294253e-02, -1.172288134658591e-01, 7.592879042322302e-02, -1.945335043500071e-02, -1.305056948983492e-01, 9.709930678775129e-02, 4.061395627418606e-02, 2.410634770711885e-01, 1.112169325505007e-01, -1.799805336205057e-02, 4.134980799731289e-02, 5.426569347681985e-02, -3.559827264597550e-02, -3.162837825986965e-02, -1.270196065617225e-01, 1.492252714264345e-01, 6.576798631257265e-02, 2.245539118229339e-01, -1.200099005009236e-01, 4.342343525631936e-02, 7.625295545857350e-02, 5.454602183164274e-02, -1.092291517479990e-01, 3.106096790315726e-02, 2.510565829025201e-02, 8.546365752158111e-02, 1.657428486097695e-01, 4.024026838761134e-02, -1.961922081431020e-01, 2.566398429363863e-01, 8.293455422148385e-02, 1.946376871407125e-01, 1.099443531749843e-01, 2.023447852783757e-01, -2.037976332359651e-03, 4.736191246133664e-02, 1.735383124773300e-01, 1.167365218416780e-01, -2.519285959989221e-03, -4.222308732580918e-02, 8.333796647399644e-03, -2.767425015291407e-02, -1.850969516767911e-01, -2.786235944375573e-02, 1.951986493253496e-01, 1.406684853128015e+00, -2.059984127722458e-18, 6.362459842078587e-02, 5.221557557789448e-02, 6.507780944299023e-02, -9.808861271307252e-02, 1.733568595805431e-01, -1.978975157111692e-01, -2.661688065993972e-02, 4.760862614893953e-02, -3.987989114023979e-02, 5.115704752431407e-02, 7.406539861528449e-02, -4.510235058844440e-02, 3.991609688265260e-02, 6.548872868419527e-02, 8.199398803246963e-02, 3.176376364661448e-03, -7.810564624924121e-02, -2.813857113944044e-02, -1.790368406050161e-01, -7.801035834177474e-02, 7.550573216231189e-02, -2.053108834818258e-01, 9.565438576783694e-02, -1.706586424341868e-01, 1.785833564545950e-01, -6.724577266777108e-02, 2.008617366101317e-02, 1.698984715495469e-01, -1.219005999340901e-01, -1.716470623751896e-01, 1.743612399396856e-01, 1.241676084820758e-01, -1.433352513611896e-02, -6.024116583312714e-02, 1.368745857266876e-01, 1.303982006253534e-01, 6.779660469767189e-02, -1.461350748014208e-01, -6.867565480763536e-02, 2.351623536368393e-01, 1.158411543794861e-01, 1.409975005073870e-01, 1.359798265367604e-01, 1.307087374767272e-01, 1.136910884492828e-01, 1.342285388778883e-01, 5.565609715432475e-02, 2.352554517967703e-04, -7.561634833866365e-02, 8.952184152838132e-02, 1.139535106841953e-01, 7.692084452695092e-02, -4.806849860918465e-02, 3.294601930537368e-02, 9.141170233762520e-02, 1.504346700671559e-02, -1.018559935174993e-01, -1.844800261856045e-02, 2.443362160294582e-02, -5.487083382375027e-02, -1.489665979797999e-01, -5.782297940587016e-02, 6.362459842078594e-02, -5.221557557789448e-02, 1.417359328009467e+00, -1.127570259384925e-17, -6.535490912185947e-02, -9.092361007983321e-02, 2.190294355598408e-01, -1.950652688163101e-02, 8.950356800172921e-02, 1.891266826276936e-02, -1.069496337952024e-01, -1.064860523990561e-01, -8.614195445742028e-02, -1.248270153410887e-01, 1.720684760922603e-04, 8.332967213960131e-04, -7.730997795031164e-02, 1.271603585844166e-03, 4.669027068516670e-02, 5.354209426954054e-02, -3.527929803002752e-02, -1.112452001711160e-01, 1.390592917473095e-01, 9.620146115626779e-02, -4.001655841276648e-02, -1.752934780657989e-02, 2.000616208534394e-01, 1.638730147865817e-01, 2.704145735208149e-03, 1.795219353730572e-01, 9.103270066165796e-02, -1.848060804116771e-02, 3.137265137557894e-02, -1.194061804607780e-01, 2.884763958878236e-01, 1.633625773892245e-01, 7.272354680680332e-02, -2.374170408266475e-01, 1.475985963053110e-01, 4.842724050296512e-02, 1.365839165339912e-01, -2.185380167931140e-02, 2.107779845635335e-01, -4.860901297656423e-03, -7.546403024381780e-02, 6.398158651302294e-02, 2.638792752850777e-01, -1.292548390673758e-01, 1.094015283253824e-01, 2.100149774746250e-01, -3.011740399288314e-02, 3.142099965011080e-03, 2.362158633795202e-01, 1.151656340285697e-01, 1.149597101628999e-03, 2.920373831944856e-02, -1.688858186885074e-01, -2.164614876482049e-01, 2.924660814671473e-01, 1.351564973094280e-01, 1.326516424810552e-02, -2.267977043868928e-01, 1.452616048881268e-01, 2.273262308936640e-01, 6.507780944299024e-02, 9.808861271307252e-02, -6.535490912185946e-02, 9.092361007983324e-02, 1.700218103310578e+00, 1.292911090688964e-17, -5.720023806013011e-03, 4.102184105117245e-03, -2.277630898235339e-02, -2.510580261207063e-01, 1.372948531850599e-01, 6.272430004182594e-02, -5.701478721624678e-02, 1.308797018943721e-01, 7.458757570762137e-02, -1.808052561788571e-01, 6.986034828372792e-02, 1.085305509603355e-02, 2.447787897085596e-01, 7.022241636854274e-03, 1.103806978090963e-01, -4.962121138889704e-02, -1.032828962564606e-01, -9.265801381155233e-03, 1.928246988474102e-01, 6.400299402962013e-02, 1.830453312269598e-01, 2.987298660192131e-02, 6.192684578501438e-02, 1.567852110063257e-01, 2.235115064788992e-02, -1.480212723879358e-02, 2.862290714256831e-02, -9.165322095346015e-02, 1.392022422506583e-01, 1.513055930415866e-02, 3.429523004955319e-02, -6.776830682457212e-02, -1.664989414308700e-01, -1.554543978239001e-01, -1.329127352227784e-01, 1.319872026095516e-01, -1.356842292579144e-02, -6.804201763837127e-02, -3.453012715828904e-02, 4.301675391036129e-02, 1.127072269824889e-01, 1.243456083399135e-03, -2.851342953412114e-02, 1.815760287936743e-01, -1.684813361976671e-02, -1.305583698999927e-01, 2.041905378638285e-01, 2.136675956716081e-01, -5.990329859579147e-03, 1.240043994982369e-02, 2.541717563101772e-01, 1.062971224646770e-01, 2.228597806628828e-02, 1.925765313232505e-01, 5.340978007818232e-02, 1.617495244576252e-01, 1.265735831830034e-01, -1.931060169882829e-02, 1.733568595805430e-01, 1.978975157111692e-01, 2.190294355598409e-01, 1.950652688163106e-02, -5.720023806012983e-03, -4.102184105117231e-03, 1.330937755480228e+00, 7.562310153086393e-18, 2.779175766716888e-02, 2.379263429210726e-02, -4.912300337681874e-02, -1.869189018462752e-02, 1.810218900528192e-01, -1.365706083133414e-02, 4.816173420153110e-02, 1.078647776203642e-01, -7.497319878709199e-02, -3.371820443243644e-02, 1.470083437528108e-01, -3.577354692105349e-02, 2.414027899028915e-01, -1.684657940641507e-01, 2.215231946042215e-03, -5.223161692939838e-03, 6.589124195390815e-02, -1.256563391254344e-01, 1.241831914847838e-01, -1.084523026267674e-01, 9.819333515459626e-02, -2.269342177213434e-01, 1.572466715890685e-01, -5.942799322122857e-02, 2.557810436185086e-02, -2.025064709502798e-03, 1.337426280084008e-01, -1.568934966741655e-01, -9.505436819401269e-02, -1.464152828048082e-01, -9.701967020442327e-02, -1.976600220701168e-02, 2.957581879495999e-02, -5.928676675992379e-02, -5.476752184162713e-02, 6.287061901759586e-02, 6.085590609172379e-02, -6.324510534729755e-02, -9.816128978145182e-02, 1.125648960031007e-01, -6.935313974454095e-02, 6.436600401243535e-02, 8.727100304012912e-02, 3.067623591156135e-02, 1.302827704945619e-01, -9.824341627209288e-02, -9.551679047233821e-03, -1.972282904170848e-01, 1.327424980761723e-01, -1.697343647544398e-01, 2.093595779077108e-01, 1.246555599484124e-01, 2.221357856431102e-01, -1.832437126764057e-01, 2.480886227978691e-02, -1.021829095502990e-01, -2.661688065993974e-02, -4.760862614893951e-02, 8.950356800172923e-02, -1.891266826276935e-02, -2.277630898235349e-02, 2.510580261207064e-01, 2.779175766716889e-02, -2.379263429210728e-02, 1.415764252982670e+00, 1.603263962562940e-17, -1.895946460232253e-01, -2.755553992481990e-04, 2.709895461837007e-02, 1.953345559429658e-01, 1.254923365786481e-01, 5.622280789735989e-02, 7.400242376912508e-02, 1.683296876191781e-01, 5.268119587582692e-03, 6.383509062914144e-02, -5.215403872645538e-02, -5.340963398945717e-02, 4.462347021288324e-02, 4.992946421010666e-02, 1.380509379494010e-01, -2.014362480762424e-01, 1.277920503342578e-02, -1.940692872053493e-02, 1.005345098561085e-01, -1.094796362973652e-02, 1.703929254696546e-01, 3.070179905484154e-02, 2.788727152527620e-03, -1.044650726631462e-01, 1.240214786219519e-01, -2.251664133862327e-02, 1.364770540913340e-01, -3.684744175565758e-03, -7.086492117084926e-02, -6.960639835085508e-02, -7.933651246757811e-02, 1.727330781425665e-01, -5.164727391284428e-02, 6.479958759278225e-02, 9.400083313922401e-02, -1.382656407485766e-01, 2.529582910687146e-01, 3.490518611973845e-02, -6.274909698770659e-02, 2.031401077946399e-01, -5.959084614968330e-03, -9.492242218034228e-02, 4.761319184238921e-02, 1.317666699352852e-01, -8.464347979036273e-02, -1.329133510198696e-01, -1.321778947048603e-01, 4.019219233780659e-02, -4.282938888467366e-02, 1.068442783765109e-01, 7.678558769078681e-02, 8.251700079945548e-02, -6.433257967852267e-02, -3.220811135784761e-02, -3.987989114023981e-02, -5.115704752431407e-02, -1.069496337952024e-01, 1.064860523990561e-01, 1.372948531850599e-01, -6.272430004182596e-02, -4.912300337681876e-02, 1.869189018462743e-02, -1.895946460232253e-01, 2.755553992481955e-04, 1.621557985501314e+00, 8.673617379884035e-19, 9.334236716264070e-02, -7.770528316965515e-03, 1.560787138526663e-01, -2.724634142430335e-02, 1.144005564692648e-02, 7.162728060297113e-02, -1.424497627725885e-01, -1.986533368141951e-01, 2.204616809277350e-01, 1.494225276739110e-01, 8.338607383495154e-02, 3.696910962566116e-02, 1.567113592988891e-01, -9.629441454446334e-02, 6.924901936863120e-02, 7.240579120304327e-02, 1.167571939166182e-01, -1.580789396625593e-01, 2.480800711495582e-01, 9.790698317717739e-02, 6.754355147822216e-02, -1.642903556635412e-04, 4.639598948242021e-03, -1.075941488082165e-01, -6.057164815466816e-02, 1.701405727923891e-01, 1.955694218956402e-01, 6.713750597916823e-02, 1.213583248019089e-01, 1.252525669374666e-01, 2.562721693739348e-01, 8.135502817041548e-02, 7.263713371877603e-03, 6.175135316628513e-03, 8.964464794511695e-02, -1.668017181791386e-01, -7.666852466538809e-03, -4.349667593317192e-02, -1.404696261840817e-02, 2.090853817111140e-01, 1.604409314294678e-01, -9.465628385308791e-02, 4.521100489372087e-02, 1.945015364797077e-02, 1.034077092233432e-02, -1.399961468159586e-01, -7.051796297022715e-02, -1.977249614537294e-02, -6.736397741388669e-02, -1.339078237649482e-02, 4.967869721346501e-02, -6.602947970646605e-02, 7.406539861528447e-02, 4.510235058844437e-02, -8.614195445742029e-02, 1.248270153410887e-01, -5.701478721624680e-02, -1.308797018943721e-01, 1.810218900528191e-01, 1.365706083133411e-02, 2.709895461837006e-02, -1.953345559429657e-01, 9.334236716264065e-02, 7.770528316965529e-03, 1.837065439570459e+00, -4.662069341687669e-18, -1.274928961648438e-01, -8.391913094440874e-02, 8.771236410424868e-02, -1.105002873933335e-01, -6.931811239959786e-02, -6.990636108762614e-02, 2.326282712233501e-01, 9.338016200613186e-02, 8.573475947409009e-02, 4.897703651137937e-02, 9.157827843429515e-02, 2.341426328808356e-01, 1.531541121739583e-01, 1.003355229300099e-01, -2.912965857469944e-02, -2.764936903132746e-03, -1.023632580330773e-01, 2.767413458563062e-02, 1.024007372715847e-01, 2.149771449769634e-01, 1.639231677554511e-01, 3.583082377985937e-02, -9.110020664690702e-03, 8.192766790116565e-02, 1.570847916179206e-01, 6.662050422502495e-02, 1.099904190264614e-01, -1.355088230434198e-01, -1.952726883693394e-01, 5.673964365088281e-02, -2.602967243052397e-02, -2.688894740068109e-01, 1.461951108415288e-01, 2.105602786095304e-01, -7.370281398261273e-02, -1.626029674033122e-01, 8.750796052607646e-02, 1.444255121993730e-02, 3.029428766594626e-01, -1.441094399041022e-01, -6.960454482298015e-02, -6.555092627149764e-02, -5.884720313532159e-02, 7.601871437469447e-02, -7.775307135024279e-02, -1.612216841274983e-01, 7.033208696563906e-02, 2.339638381279231e-01, 1.932917202565416e-01, 2.780984405644039e-02, 3.991609688265260e-02, -6.548872868419524e-02, 1.720684760922464e-04, -8.332967213960235e-04, 7.458757570762140e-02, 1.808052561788570e-01, 4.816173420153112e-02, -1.078647776203643e-01, 1.254923365786481e-01, -5.622280789735989e-02, 1.560787138526663e-01, 2.724634142430338e-02, -1.274928961648437e-01, 8.391913094440877e-02, 1.466400344079027e+00, -2.958516678169820e-17, 9.537427989015995e-02, 3.211943043363986e-02, 2.289960273796642e-01, -7.468813179760038e-02, 1.128571960018523e-01, -2.170912525741772e-01, 9.559172360059086e-02, 8.724205505225509e-02, -4.640429427238070e-02, -2.616337599105659e-02, -2.276948436740099e-02, 7.803483169664871e-02, 1.758735644524727e-02, -1.556972247124214e-01, -2.664863828249250e-03, 1.469257090226409e-01, 5.287287782072719e-02, 1.722752649453322e-02, 4.805157598593380e-02, 1.241747771296698e-01, 1.242430978153862e-01, -6.862307250293129e-02, 1.041759850947198e-01, -3.661553314427912e-02, -9.157412415562180e-02, 1.189559634927495e-01, -1.669561886166739e-01, -4.485487376937810e-02, 2.448417727261179e-02, -1.372391202903039e-01, 1.218597712558503e-01, 1.813698176617561e-01, 1.696847126055886e-01, 1.673315828106967e-01, -2.984709016665774e-02, 3.513030301900165e-02, -6.879814400453847e-02, 7.707249314693343e-02, 2.536097814995392e-03, -1.374096888983977e-01, 4.141340558350956e-02, 2.909182490849804e-02, 1.093673980257539e-01, -7.870307621522088e-02, 1.294897192841774e-01, -1.129943070243787e-01, -1.104455122528068e-01, -1.212183083732005e-01, 8.199398803246966e-02, -3.176376364661436e-03, -7.730997795031165e-02, -1.271603585844164e-03, 6.986034828372792e-02, -1.085305509603355e-02, -7.497319878709201e-02, 3.371820443243644e-02, 7.400242376912508e-02, -1.683296876191781e-01, 1.144005564692646e-02, -7.162728060297113e-02, 8.771236410424871e-02, 1.105002873933335e-01, 9.537427989015997e-02, -3.211943043363986e-02, 1.261408738997681e+00, 3.422013106907373e-18, 1.737824612720705e-01, 1.839264663829031e-01, -3.167925766697145e-02, 1.701376758061703e-01, 4.446473640839006e-02, -1.179400592180256e-01, 9.827461816065894e-02, -6.343571678939754e-02, -6.443111699534101e-02, 9.358932348434904e-02, -9.105550427354614e-03, 2.178715723158520e-01, 1.315513978847488e-01, -1.345987416926267e-02, 1.479951539812767e-01, 5.873550839575765e-02, 1.529043124648444e-01, 2.702542013295644e-02, 2.867124636394122e-01, 1.970453224814011e-02, 7.769456239392772e-02, 7.169308343181392e-02, 1.770984060666498e-01, -8.805666025386280e-02, 6.035463589696978e-02, 8.112668769035762e-03, 1.227691575805739e-01, 3.691392044370789e-02, -4.799169736394354e-02, -9.679383382363529e-02, 1.359979027944752e-01, -1.728222478656969e-01, 1.748481844419689e-01, -1.020134123794469e-01, 2.432998340582476e-01, 1.465051479728691e-01, 2.539001251910695e-01, 2.590538346144899e-01, -1.409333874348664e-01, -4.177025723883897e-02, 7.792544718011070e-02, -2.519233858484766e-02, 1.530340995518051e-01, 4.300952122936830e-02, -1.010785318810045e-01, -8.976445986294253e-02, -7.810564624924123e-02, 2.813857113944047e-02, 4.669027068516669e-02, -5.354209426954054e-02, 2.447787897085596e-01, -7.022241636854318e-03, 1.470083437528107e-01, 3.577354692105347e-02, 5.268119587582706e-03, -6.383509062914143e-02, -1.424497627725885e-01, 1.986533368141951e-01, -6.931811239959783e-02, 6.990636108762614e-02, 2.289960273796642e-01, 7.468813179760032e-02, 1.737824612720705e-01, -1.839264663829031e-01, 1.534680602040200e+00, 4.336808689942018e-19, 3.627971569858908e-02, 3.070756713559068e-02, 2.187455329071939e-01, 4.301820218824928e-02, 4.405618987806787e-02, 1.341964849221372e-02, -9.149041767182974e-02, -3.165931207885543e-02, 2.444262392115694e-01, -1.821004649170381e-01, 1.710813778441636e-01, -1.643708418164561e-01, -2.667772487126394e-03, 2.521904017489629e-02, -1.600098602961877e-01, 1.731579962168912e-02, 4.386534502086519e-02, 7.172788574986196e-02, 7.907806613585625e-02, -1.024905825093405e-02, 3.239937315923087e-02, 1.696731783918450e-02, -5.256995972680149e-02, 4.421914923915381e-03, -1.048605519981758e-01, 7.505993737092739e-02, -4.161188362734959e-02, 5.468619382430457e-02, 1.507374489433070e-01, -1.545910371826447e-01, 3.214188959548327e-02, 1.126094000275749e-01, 7.445985354568589e-02, -6.591910277925600e-02, 1.677590666377521e-01, -1.640660655318125e-01, -4.141538542762294e-02, -1.859514892602060e-01, 2.010646431483557e-01, -1.459917674592322e-01, 1.649908136607462e-01, 1.838943783179705e-01, -1.172288134658591e-01, -7.592879042322302e-02, -1.790368406050162e-01, 7.801035834177474e-02, -3.527929803002751e-02, 1.112452001711161e-01, 1.103806978090963e-01, 4.962121138889704e-02, 2.414027899028915e-01, 1.684657940641506e-01, -5.215403872645540e-02, 5.340963398945711e-02, 2.204616809277350e-01, -1.494225276739110e-01, 2.326282712233501e-01, -9.338016200613186e-02, 1.128571960018523e-01, 2.170912525741772e-01, -3.167925766697148e-02, -1.701376758061703e-01, 3.627971569858914e-02, -3.070756713559071e-02, 1.633691052210061e+00, 4.675621868843738e-18, 9.659131534204458e-02, 1.785701850741721e-02, 1.291329469383505e-01, 8.140957033178473e-02, 1.884417433535177e-01, -1.667640278000770e-01, -1.530623565720618e-01, -8.344588765744818e-02, 2.823099559990397e-02, -2.527862137754635e-02, 6.469045734745138e-02, 6.936839900370655e-02, -5.699990158134163e-02, 1.361262974271912e-01, -4.279281765654853e-02, 1.575299637151777e-01, -3.800743045190244e-02, -1.298636116882344e-01, 6.354006218419966e-02, -5.559639703963705e-02, 2.248636686242997e-01, -2.299724483806132e-03, 1.173543237949016e-01, 8.793324307623765e-02, -9.956199407906642e-02, 1.703870228932226e-02, -5.649277896873882e-02, 4.656608563015058e-02, 1.358518726206936e-01, -3.786783624340463e-02, 5.454292404833522e-02, 1.173052609850810e-01, 3.373288940584827e-02, 8.080079205686513e-02, -7.795899457234315e-02, -2.027396288004549e-01, -1.763896579243615e-02, 9.196667190154872e-02, 1.734050513150049e-01, -7.759217219502183e-02, -1.945335043500072e-02, 1.305056948983492e-01, 7.550573216231188e-02, 2.053108834818258e-01, 1.390592917473095e-01, -9.620146115626776e-02, -1.032828962564607e-01, 9.265801381155261e-03, 2.215231946042215e-03, 5.223161692939845e-03, 4.462347021288326e-02, -4.992946421010670e-02, 8.338607383495150e-02, -3.696910962566116e-02, 8.573475947409014e-02, -4.897703651137927e-02, 9.559172360059087e-02, -8.724205505225512e-02, 4.446473640839012e-02, 1.179400592180256e-01, 2.187455329071938e-01, -4.301820218824928e-02, 9.659131534204458e-02, -1.785701850741718e-02, 1.828268346561770e+00, -2.428443459778079e-17, 1.053906481408153e-01, 9.303098835263084e-02, -1.721734107613043e-01, 3.578450120066880e-02, -1.265340360431437e-01, 6.172130883881411e-04, -4.433345802141189e-02, -8.552087987336362e-03, -1.584885774537163e-01, -1.433937618315922e-02, -1.712530975073712e-01, 7.789869216231693e-02, 1.791647663210277e-01, -1.118117942826509e-01, 3.008935912327727e-01, 3.854395378095105e-02, 9.293990711439569e-02, -8.970313669284997e-02, -1.745825792792710e-02, 4.517269899415798e-02, 2.881519313878787e-02, 1.085350170762272e-01, 7.127639077640469e-03, -1.843418474328996e-01, -6.927255984441266e-02, -1.133838167494618e-01, -6.539200901412612e-02, -5.206556028298353e-02, -1.198557250993577e-01, -6.738637121284533e-03, 1.340223386923674e-01, -1.604938123809096e-01, 1.966258276962925e-01, 5.915788357889894e-02, -1.516179781149953e-01, -2.483829424073667e-04, -6.646459510731680e-02, 1.229216047890506e-01, 9.709930678775128e-02, -4.061395627418610e-02, 9.565438576783697e-02, 1.706586424341868e-01, -4.001655841276652e-02, 1.752934780657987e-02, 1.928246988474103e-01, -6.400299402962015e-02, 6.589124195390816e-02, 1.256563391254344e-01, 1.380509379494010e-01, 2.014362480762423e-01, 1.567113592988892e-01, 9.629441454446337e-02, 9.157827843429517e-02, -2.341426328808356e-01, -4.640429427238064e-02, 2.616337599105656e-02, 9.827461816065895e-02, 6.343571678939754e-02, 4.405618987806791e-02, -1.341964849221372e-02, 1.291329469383506e-01, -8.140957033178470e-02, 1.053906481408153e-01, -9.303098835263085e-02, 1.631599333658829e+00, 3.286487835346685e-19, 1.040157894678493e-01, -2.328429248700770e-02, 2.523446704063967e-01, 5.394850570844985e-02, -1.165095784308056e-01, -1.738568191385417e-01, 7.958029598641717e-02, 5.617223763390379e-02, -6.958578335102412e-02, 5.351487931348286e-02, -3.979069986210029e-02, 8.476554028894344e-02, -7.806872772864526e-02, 8.511354693226288e-02, -1.019447838011314e-01, -2.253805760276160e-02, 1.412241896827957e-01, -7.889282041169265e-02, -5.408121862313370e-02, -1.574156973483885e-01, 7.097378171246493e-02, 1.063327380631592e-02, 2.390039025450951e-01, -1.098453070791099e-01, 2.483575843944261e-01, -2.465575134509616e-02, -4.631757395874188e-02, -6.117810691795822e-02, 3.600023227545532e-03, 4.089039125817026e-02, -4.936640147480659e-03, -7.397007979596038e-02, 9.641849930860949e-02, -1.868273220230922e-01, 1.415719223745476e-01, -8.409547812750670e-02, 2.410634770711885e-01, -1.112169325505007e-01, 1.785833564545951e-01, 6.724577266777108e-02, 2.000616208534394e-01, -1.638730147865817e-01, 1.830453312269598e-01, -2.987298660192125e-02, 1.241831914847838e-01, 1.084523026267673e-01, 1.277920503342581e-02, 1.940692872053497e-02, 6.924901936863120e-02, -7.240579120304330e-02, 1.531541121739584e-01, -1.003355229300099e-01, -2.276948436740098e-02, -7.803483169664874e-02, -6.443111699534103e-02, -9.358932348434901e-02, -9.149041767182974e-02, 3.165931207885540e-02, 1.884417433535177e-01, 1.667640278000770e-01, -1.721734107613043e-01, -3.578450120066879e-02, 1.040157894678492e-01, 2.328429248700773e-02, 1.482267280019482e+00, 2.946658216908260e-17, 1.481596141273812e-01, -1.272178123345416e-02, -1.067591280897650e-01, -5.557919378413687e-02, 1.896892386284446e-03, 1.457505310027838e-01, 7.526648284539431e-02, 1.698872956636256e-01, -1.689638584925658e-02, 1.405893008656570e-02, -3.006975536255116e-02, -1.234571850968861e-01, 7.343665702950661e-02, 1.085173433313548e-02, -1.331695302102801e-02, 1.369330130399718e-02, -6.670500109129605e-02, 1.722148883323632e-01, 3.231142106365084e-02, -1.543005061819213e-02, 9.965019816913745e-02, -6.334932701013934e-02, -7.753496639525506e-02, -1.763540457051778e-01, -2.005869215687726e-02, -2.034269643151261e-01, -1.155497016630471e-01, 1.188856946605500e-01, 2.766741873099213e-01, 2.167943968582434e-02, 7.309304137305078e-02, 1.088642503627557e-01, -1.481715466544233e-02, 1.933945367388265e-01, -1.799805336205057e-02, -4.134980799731289e-02, 2.008617366101312e-02, -1.698984715495469e-01, 2.704145735208205e-03, -1.795219353730572e-01, 6.192684578501444e-02, -1.567852110063258e-01, 9.819333515459626e-02, 2.269342177213434e-01, 1.005345098561085e-01, 1.094796362973652e-02, 1.167571939166182e-01, 1.580789396625593e-01, -2.912965857469940e-02, 2.764936903132759e-03, 1.758735644524725e-02, 1.556972247124214e-01, -9.105550427354642e-03, -2.178715723158519e-01, 2.444262392115693e-01, 1.821004649170382e-01, -1.530623565720617e-01, 8.344588765744819e-02, -1.265340360431436e-01, -6.172130883881689e-04, 2.523446704063967e-01, -5.394850570844986e-02, 1.481596141273813e-01, 1.272178123345414e-02, 1.617049337388666e+00, -1.425895263407889e-17, 3.733857649386359e-02, 4.941806926087725e-02, -1.113281459316223e-01, -8.651405424553942e-02, -2.947674049403959e-02, -1.289846447688028e-01, 1.808776432348571e-01, -4.019231953630720e-02, 1.806946549791907e-01, 8.130717758302691e-02, 1.179743809499827e-01, 1.545062575566014e-01, 1.642863566853655e-01, 3.526765007084445e-02, 4.895406759262231e-02, -1.828082880645086e-01, 7.616512977376111e-02, 9.913873644863852e-02, -3.767267425725156e-02, -8.602643066150678e-02, -5.170877626503247e-02, -3.946388253737849e-02, -1.224357101134994e-01, -9.047427579397432e-02, -1.066283729000563e-01, 1.497742082889040e-02, -7.093074995122076e-02, -9.251081245751024e-02, 1.067054137971544e-01, 6.584990177629058e-02, 1.797443905627565e-01, -1.615688489388402e-01, 5.426569347681984e-02, 3.559827264597551e-02, -1.219005999340900e-01, 1.716470623751896e-01, 9.103270066165796e-02, 1.848060804116771e-02, 2.235115064788991e-02, 1.480212723879366e-02, 1.572466715890685e-01, 5.942799322122858e-02, 1.703929254696546e-01, -3.070179905484152e-02, 2.480800711495583e-01, -9.790698317717739e-02, -1.023632580330772e-01, -2.767413458563058e-02, -2.664863828249250e-03, -1.469257090226409e-01, 1.315513978847489e-01, 1.345987416926268e-02, 1.710813778441636e-01, 1.643708418164561e-01, 2.823099559990402e-02, 2.527862137754635e-02, -4.433345802141182e-02, 8.552087987336383e-03, -1.165095784308055e-01, 1.738568191385417e-01, -1.067591280897650e-01, 5.557919378413688e-02, 3.733857649386360e-02, -4.941806926087724e-02, 1.400266943102658e+00, -1.718460443389525e-17, 1.641110390211126e-01, -5.691259085378512e-02, -2.313260508578084e-02, 8.783330205167364e-02, 6.900921890316103e-02, 2.817335283378353e-02, 1.123442024559693e-01, 6.789458376075681e-02, 6.546622816877078e-02, -1.259725545966675e-01, 1.928735218974574e-01, -9.131873840213892e-02, 1.624796584963064e-01, 3.509536570468828e-02, 1.324946270011199e-01, -1.190500314931527e-02, 2.699804587074963e-01, 4.515717589242261e-02, -1.208095519559371e-01, 1.897276226071015e-01, -6.725945814236647e-03, 2.853423876914862e-02, 1.267931154565452e-01, 1.118062915428780e-01, -1.133858409372197e-02, 1.877735927630879e-01, 1.607348648597032e-01, -7.495776572939725e-02, 2.231973920530445e-02, -1.282741430376782e-01, -3.162837825986965e-02, 1.270196065617225e-01, 1.743612399396856e-01, -1.241676084820757e-01, 3.137265137557893e-02, 1.194061804607780e-01, 2.862290714256830e-02, 9.165322095346018e-02, 2.557810436185082e-02, 2.025064709502815e-03, 2.788727152527593e-03, 1.044650726631462e-01, 6.754355147822214e-02, 1.642903556636419e-04, 1.024007372715847e-01, -2.149771449769634e-01, 5.287287782072723e-02, -1.722752649453324e-02, 1.479951539812767e-01, -5.873550839575765e-02, -2.667772487126421e-03, -2.521904017489633e-02, 6.469045734745138e-02, -6.936839900370652e-02, -1.584885774537163e-01, 1.433937618315922e-02, 7.958029598641722e-02, -5.617223763390373e-02, 1.896892386284474e-03, -1.457505310027838e-01, -1.113281459316224e-01, 8.651405424553942e-02, 1.641110390211126e-01, 5.691259085378509e-02, 1.793357299232072e+00, 1.461640053782021e-17, 1.484875489528604e-01, 1.079894947503931e-01, -7.624183628309930e-02, -9.704191833461852e-02, 1.006069555784030e-01, -5.319965681244396e-02, 1.840806444865623e-01, -9.806654167550682e-02, -5.792717151124856e-02, 5.072390317781699e-02, 1.215775064869922e-01, -2.136693962358057e-01, 1.119926138371052e-02, 1.066993207478992e-01, 1.416585148608868e-02, -1.410123283094021e-01, 1.619589782283658e-01, 8.518064393053302e-03, -2.763082765378888e-02, 5.109350819268674e-02, -1.501519923988478e-01, 1.426695289455632e-03, 3.141924619125415e-02, 1.668167152121632e-01, -1.175078059535012e-03, -8.926264742645004e-02, 1.146669577614026e-01, 2.433148670847193e-01, 1.492252714264346e-01, -6.576798631257270e-02, -1.433352513611888e-02, 6.024116583312712e-02, 2.884763958878236e-01, -1.633625773892245e-01, 1.392022422506582e-01, -1.513055930415870e-02, 1.337426280084008e-01, 1.568934966741655e-01, 1.240214786219519e-01, 2.251664133862330e-02, 4.639598948241980e-03, 1.075941488082165e-01, 1.639231677554511e-01, -3.583082377985945e-02, 4.805157598593377e-02, -1.241747771296698e-01, 1.529043124648443e-01, -2.702542013295644e-02, -1.600098602961877e-01, -1.731579962168912e-02, -5.699990158134162e-02, -1.361262974271912e-01, -1.712530975073713e-01, -7.789869216231693e-02, -6.958578335102406e-02, -5.351487931348290e-02, 7.526648284539436e-02, -1.698872956636256e-01, -2.947674049403960e-02, 1.289846447688028e-01, -2.313260508578090e-02, -8.783330205167361e-02, 1.484875489528605e-01, -1.079894947503931e-01, 1.738956472296186e+00, -8.402566836762659e-18, 1.145228642802917e-01, -4.577974234436686e-03, 2.581454772495737e-01, 1.636564564128942e-01, 1.370612860693760e-01, -5.377145133526643e-02, 8.413217923803683e-02, 1.005848929418461e-01, -5.871880911747368e-04, 1.998142080309598e-02, -1.305141584643584e-01, -1.749353888568689e-01, 8.089604785972698e-02, 1.181845952225509e-01, 7.774739664800645e-02, 8.340129509651066e-02, -1.251870624352213e-01, -3.733829657673951e-04, 2.302026304105762e-01, -7.322257030385856e-02, 2.036988770927931e-02, -1.755005060897039e-02, -7.217727542235611e-03, 6.979923639055270e-02, -7.796837632945337e-02, -1.553025818514270e-01, 2.245539118229339e-01, 1.200099005009236e-01, 1.368745857266877e-01, -1.303982006253534e-01, 7.272354680680332e-02, 2.374170408266475e-01, 3.429523004955318e-02, 6.776830682457211e-02, -9.505436819401272e-02, 1.464152828048082e-01, 1.364770540913340e-01, 3.684744175565741e-03, -6.057164815466815e-02, -1.701405727923891e-01, -9.110020664690674e-03, -8.192766790116561e-02, 1.242430978153862e-01, 6.862307250293131e-02, 2.867124636394122e-01, -1.970453224814012e-02, 4.386534502086518e-02, -7.172788574986196e-02, -4.279281765654853e-02, -1.575299637151777e-01, 1.791647663210278e-01, 1.118117942826509e-01, -3.979069986210031e-02, -8.476554028894344e-02, -1.689638584925657e-02, -1.405893008656570e-02, 1.808776432348571e-01, 4.019231953630718e-02, 6.900921890316095e-02, -2.817335283378350e-02, -7.624183628309941e-02, 9.704191833461850e-02, 1.145228642802917e-01, 4.577974234436682e-03, 1.340953415475964e+00, -3.144186300207963e-18, -4.554285168353059e-02, 1.248742304387199e-02, -5.264599781114607e-02, -1.859468146578881e-01, 5.407312524073474e-02, 9.582599747091876e-02, -3.067670987368769e-02, -8.205385906860157e-03, 2.137211866254674e-01, 8.390025673288341e-02, 1.987859494286491e-01, -1.477095079778523e-01, -4.495161393519861e-02, 1.120030392368822e-01, -4.629948251818317e-02, 2.580457328470407e-02, 7.274496517910597e-02, -1.350935429763331e-01, 7.611432174945862e-02, 2.836382804560091e-02, -6.297456768053949e-02, -9.376323669457485e-03, -1.579210049839344e-01, 4.154044035905019e-02, 4.342343525631938e-02, -7.625295545857350e-02, 6.779660469767189e-02, 1.461350748014208e-01, 1.475985963053109e-01, -4.842724050296512e-02, -1.664989414308700e-01, 1.554543978239001e-01, -9.701967020442331e-02, 1.976600220701174e-02, -7.086492117084926e-02, 6.960639835085507e-02, 1.955694218956402e-01, -6.713750597916820e-02, 1.570847916179206e-01, -6.662050422502495e-02, 1.041759850947198e-01, 3.661553314427913e-02, 7.769456239392780e-02, -7.169308343181395e-02, 7.907806613585626e-02, 1.024905825093406e-02, -3.800743045190245e-02, 1.298636116882344e-01, 3.008935912327726e-01, -3.854395378095108e-02, -7.806872772864519e-02, -8.511354693226289e-02, -3.006975536255115e-02, 1.234571850968861e-01, 1.806946549791907e-01, -8.130717758302690e-02, 1.123442024559693e-01, -6.789458376075681e-02, 1.006069555784030e-01, 5.319965681244396e-02, 2.581454772495737e-01, -1.636564564128942e-01, -4.554285168353059e-02, -1.248742304387204e-02, 1.525658915853350e+00, 1.473159701864679e-17, 1.678913344674229e-01, 5.202264610687268e-02, 6.139354167015010e-02, -5.154815018551145e-02, 2.559330410515403e-01, 9.351130320145253e-02, 1.633895913310021e-01, 2.826260541547577e-02, 2.998319583514986e-02, -2.265527815438312e-01, 1.885918103724986e-01, -1.005877434933440e-02, 3.594416044446869e-02, 1.237741618836196e-01, 2.886853122305869e-03, 9.116406111935435e-02, 7.773006873497590e-02, 3.903851723707314e-02, -1.628208654782490e-01, -4.265507112452199e-02, 3.757239311668988e-02, -6.161834601345348e-02, 5.454602183164277e-02, 1.092291517479990e-01, -6.867565480763536e-02, -2.351623536368392e-01, 1.365839165339912e-01, 2.185380167931142e-02, -1.329127352227784e-01, -1.319872026095516e-01, 2.957581879495999e-02, 5.928676675992374e-02, -7.933651246757809e-02, -1.727330781425666e-01, 1.213583248019090e-01, -1.252525669374666e-01, 1.099904190264614e-01, 1.355088230434198e-01, -9.157412415562184e-02, -1.189559634927495e-01, 1.770984060666497e-01, 8.805666025386273e-02, 3.239937315923087e-02, -1.696731783918448e-02, 6.354006218419971e-02, 5.559639703963704e-02, 9.293990711439565e-02, 8.970313669284997e-02, -1.019447838011314e-01, 2.253805760276160e-02, 7.343665702950666e-02, -1.085173433313546e-02, 1.179743809499827e-01, -1.545062575566014e-01, 6.546622816877079e-02, 1.259725545966675e-01, 1.840806444865623e-01, 9.806654167550688e-02, 1.370612860693760e-01, 5.377145133526643e-02, -5.264599781114607e-02, 1.859468146578881e-01, 1.678913344674229e-01, -5.202264610687268e-02, 1.742163885334506e+00, -1.724559080609755e-18, 1.893002359233032e-01, -5.437044187708562e-03, -1.026626629671180e-01, 3.500148353654436e-03, 1.133138406960916e-01, 2.754360992968011e-02, -7.965362514844486e-02, -8.368773959697733e-02, 8.766452015171768e-02, -5.181740095084696e-02, -1.924879221126594e-02, 3.751260206770002e-03, -1.751239240944551e-02, 1.509438525919326e-01, 2.061974637160968e-01, 2.392159006405743e-02, 1.149188831746611e-01, 2.292163525504219e-01, 1.899525279326884e-01, -8.816837596517973e-02, 3.106096790315725e-02, -2.510565829025199e-02, 1.158411543794861e-01, -1.409975005073870e-01, 2.107779845635335e-01, 4.860901297656451e-03, -1.356842292579150e-02, 6.804201763837124e-02, -5.476752184162717e-02, -6.287061901759591e-02, -5.164727391284435e-02, -6.479958759278225e-02, 2.562721693739348e-01, -8.135502817041548e-02, -1.952726883693393e-01, -5.673964365088283e-02, -1.669561886166740e-01, 4.485487376937806e-02, 6.035463589696981e-02, -8.112668769035748e-03, -5.256995972680151e-02, -4.421914923915370e-03, 2.248636686242997e-01, 2.299724483806161e-03, -1.745825792792710e-02, -4.517269899415798e-02, 1.412241896827957e-01, 7.889282041169268e-02, -1.331695302102799e-02, -1.369330130399717e-02, 1.642863566853655e-01, -3.526765007084449e-02, 1.928735218974574e-01, 9.131873840213892e-02, -5.792717151124856e-02, -5.072390317781699e-02, 8.413217923803687e-02, -1.005848929418461e-01, 5.407312524073475e-02, -9.582599747091877e-02, 6.139354167015009e-02, 5.154815018551145e-02, 1.893002359233032e-01, 5.437044187708562e-03, 1.263803090470058e+00, 7.372574772901430e-18, 1.522515217844858e-01, -2.045872405207408e-01, -3.917961611607224e-02, 9.926172937384260e-02, 4.397303944473886e-02, 7.280044618879063e-02, 1.064341108242524e-01, -9.127831414677159e-02, 1.728105283146434e-01, -5.019282833828738e-02, 1.167353821611380e-01, -2.288996683919749e-02, -3.463937517543911e-02, -1.022448645303654e-01, 7.631680711995192e-02, -6.573174657830165e-02, 5.945481899827111e-02, 3.732105336603584e-02, 8.546365752158108e-02, -1.657428486097695e-01, 1.359798265367604e-01, -1.307087374767273e-01, -7.546403024381776e-02, -6.398158651302291e-02, -3.453012715828904e-02, -4.301675391036131e-02, 6.085590609172378e-02, 6.324510534729755e-02, 9.400083313922407e-02, 1.382656407485766e-01, 7.263713371877603e-03, -6.175135316628583e-03, -2.602967243052395e-02, 2.688894740068109e-01, 2.448417727261179e-02, 1.372391202903039e-01, 1.227691575805739e-01, -3.691392044370789e-02, -1.048605519981758e-01, -7.505993737092742e-02, 1.173543237949015e-01, -8.793324307623759e-02, 2.881519313878779e-02, -1.085350170762272e-01, -5.408121862313375e-02, 1.574156973483886e-01, -6.670500109129604e-02, -1.722148883323631e-01, 4.895406759262230e-02, 1.828082880645086e-01, 1.624796584963063e-01, -3.509536570468830e-02, 1.215775064869923e-01, 2.136693962358057e-01, -5.871880911747229e-04, -1.998142080309599e-02, -3.067670987368770e-02, 8.205385906860117e-03, 2.559330410515402e-01, -9.351130320145253e-02, -1.026626629671180e-01, -3.500148353654421e-03, 1.522515217844858e-01, 2.045872405207408e-01, 1.535438113907342e+00, -7.589415207398531e-19, 1.414687710257091e-01, -8.378368014024740e-02, -8.201497139294579e-02, 5.538503968436732e-02, -5.961717124084442e-04, -5.429817336469371e-02, 1.848060454100060e-01, -1.248673320527933e-01, -8.032856988192477e-03, 2.842493702695300e-02, 6.185045792202055e-02, -2.178291900328748e-03, -8.300391894406560e-02, 2.024697593037038e-01, -1.240382981068967e-01, -3.590298076980537e-02, 4.024026838761134e-02, 1.961922081431020e-01, 1.136910884492828e-01, -1.342285388778883e-01, 2.638792752850777e-01, 1.292548390673758e-01, 1.127072269824889e-01, -1.243456083399160e-03, -9.816128978145182e-02, -1.125648960031007e-01, 2.529582910687146e-01, -3.490518611973848e-02, 8.964464794511692e-02, 1.668017181791386e-01, 1.461951108415288e-01, -2.105602786095304e-01, 1.218597712558503e-01, -1.813698176617560e-01, -4.799169736394353e-02, 9.679383382363532e-02, -4.161188362734959e-02, -5.468619382430449e-02, -9.956199407906643e-02, -1.703870228932223e-02, 7.127639077640538e-03, 1.843418474328996e-01, 7.097378171246493e-02, -1.063327380631591e-02, 3.231142106365087e-02, 1.543005061819216e-02, 7.616512977376112e-02, -9.913873644863852e-02, 1.324946270011199e-01, 1.190500314931528e-02, 1.119926138371058e-02, -1.066993207478992e-01, -1.305141584643583e-01, 1.749353888568688e-01, 2.137211866254674e-01, -8.390025673288339e-02, 1.633895913310021e-01, -2.826260541547580e-02, 1.133138406960916e-01, -2.754360992968010e-02, -3.917961611607217e-02, -9.926172937384260e-02, 1.414687710257090e-01, 8.378368014024737e-02, 1.695095902925721e+00, 5.692061405548898e-19, -1.593938504817247e-01, 1.197912985654549e-01, 9.649770377559537e-02, -4.965816987723400e-02, -3.346790820427029e-02, -5.004973848760259e-02, 3.251745401726239e-01, -6.325559692321776e-02, 9.112940704500090e-02, 7.204176806302476e-03, 2.085006714654560e-01, -9.405819477320435e-02, -4.828557685254523e-02, 3.307210040613725e-02, 2.566398429363863e-01, -8.293455422148381e-02, 5.565609715432478e-02, -2.352554517968293e-04, 1.094015283253825e-01, -2.100149774746250e-01, -2.851342953412114e-02, -1.815760287936743e-01, -6.935313974454095e-02, -6.436600401243529e-02, -6.274909698770653e-02, -2.031401077946399e-01, -7.666852466538823e-03, 4.349667593317191e-02, -7.370281398261275e-02, 1.626029674033122e-01, 1.696847126055887e-01, -1.673315828106967e-01, 1.359979027944751e-01, 1.728222478656969e-01, 1.507374489433070e-01, 1.545910371826447e-01, -5.649277896873880e-02, -4.656608563015058e-02, -6.927255984441263e-02, 1.133838167494618e-01, 2.390039025450951e-01, 1.098453070791099e-01, 9.965019816913745e-02, 6.334932701013934e-02, -3.767267425725158e-02, 8.602643066150678e-02, 2.699804587074963e-01, -4.515717589242261e-02, 1.416585148608866e-02, 1.410123283094021e-01, 8.089604785972707e-02, -1.181845952225510e-01, 1.987859494286491e-01, 1.477095079778523e-01, 2.998319583514988e-02, 2.265527815438312e-01, -7.965362514844483e-02, 8.368773959697728e-02, 4.397303944473885e-02, -7.280044618879063e-02, -8.201497139294578e-02, -5.538503968436732e-02, -1.593938504817247e-01, -1.197912985654549e-01, 1.393056147631472e+00, -7.860465750519907e-19 };
    
    //arma::cx_mat _A(m,m);
    //unsigned k = 0;
    //for (unsigned i = 0; i < m; ++i)
    //for (unsigned j = 0; j < m; ++j)
    //{
    //  _A(i,j) = std::complex<double>(__A[2*k], __A[2*k+1]);
    //  k ++;
    //}
    arma::cx_mat _A(m, m, arma::fill::randn);
    for (unsigned i = 0; i < m; ++i)
    {
      _A.col(i) /= arma::norm(_A.col(i));
    }
    _A += _A.t();
    
    double trA = arma::trace(_A).real();

    //time_result_t result_lapack = test_lapack(_A);

    time_result_t result_cusolver = { 0., 0., 0., 0. };
    try
    {
      result_cusolver = test_cusolver(_A);
    }
    catch (CudaException &e)
    {
      std::cerr << e.what() << std::endl;
    }

    time_result_t result_magma_cpu = { 0., 0., 0., 0. };
    try
    {
      result_magma_cpu = test_magma_cpu(_A);
    }
    catch (CudaException &e)
    {
      std::cerr << e.what() << std::endl;
    }

    time_result_t result_magma_gpu = { 0., 0., 0., 0. };
    try
    {
      result_magma_gpu = test_magma_gpu(_A);
    }
    catch (CudaException &e)
    {
      std::cerr << e.what() << std::endl;
    }







    //double error_cpu = std::abs((result_lapack.trace - trA)/trA);
    double error_cusol = std::abs((result_cusolver.trace - trA)/trA);
    double error_magma_cpu = std::abs((result_magma_cpu.trace - trA)/trA);
    double error_magma_gpu = std::abs((result_magma_gpu.trace - trA)/trA);
    //#   dim     lapack/load lapack/transfer  lapack/compute    lapack/error        gpu/load    gpu/transfer     gpu/compute       gpu/error
    if (print_header)
    {
      std::cout << "# "
                << std::setw(5)  << "dim" << " "
                //<< std::setw(19) << "lapack/load" << " "
                //<< std::setw(19) << "lapack/transfer" << " "
                //<< std::setw(19) << "lapack/compute" << " "
                //<< std::setw(19) << "lapack/error" << " "
                << std::setw(19) << "cusolver/load" << " "
                << std::setw(19) << "cusolver/transfer" << " "
                << std::setw(19) << "cusolver/compute" << " "
                << std::setw(19) << "cusolver/error" << " "
                << std::setw(19) << "magma_cpu/load" << " "
                << std::setw(19) << "magma_cpu/transfer" << " "
                << std::setw(19) << "magma_cpu/compute" << " "
                << std::setw(19) << "magma_cpu/error" << " "
                << std::setw(19) << "magma_gpu/load" << " "
                << std::setw(19) << "magma_gpu/transfer" << " "
                << std::setw(19) << "magma_gpu/compute" << " "
                << std::setw(19) << "magma_gpu/error" << " "
                << std::endl;
    }
    std::cout << "  "
              << std::setw(5)  << m << " "
              //<< std::setw(19) << std::scientific << result_lapack.load_time << " "
              //<< std::setw(19) << std::scientific << result_lapack.transfer_time << " "
              //<< std::setw(19) << std::scientific << result_lapack.compute_time << " "
              //<< std::setw(19) << std::scientific << error_cpu << " "
              << std::setw(19) << std::scientific << result_cusolver.load_time << " "
              << std::setw(19) << std::scientific << result_cusolver.transfer_time << " "
              << std::setw(19) << std::scientific << result_cusolver.compute_time << " "
              << std::setw(19) << std::scientific << error_cusol << " "
              << std::setw(19) << std::scientific << result_magma_cpu.load_time << " "
              << std::setw(19) << std::scientific << result_magma_cpu.transfer_time << " "
              << std::setw(19) << std::scientific << result_magma_cpu.compute_time << " "
              << std::setw(19) << std::scientific << error_magma_cpu << " "
              << std::setw(19) << std::scientific << result_magma_gpu.load_time << " "
              << std::setw(19) << std::scientific << result_magma_gpu.transfer_time << " "
              << std::setw(19) << std::scientific << result_magma_gpu.compute_time << " "
              << std::setw(19) << std::scientific << error_magma_gpu << " "
              << std::endl;

    magma_finalize();
    return 0;

}
